name: Build and Upload app
on:
  release:
    types: [ created ]
jobs:
  build:
    runs-on: [macos-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Install certificate and provisioning profile
        env:
          SIGNING_CERTIFICATE_P12_PASSWORD: ${{ secrets.SIGNING_CERTIFICATE_P12_PASSWORD }}
          SIGNING_CERTIFICATE_P12_BASE64: ${{ secrets.SIGNING_CERTIFICATE_P12_BASE64 }}
          PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PUBLIC_CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate_public.crt
          PROVISIONING_PROFILE_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          echo -n $SIGNING_CERTIFICATE_P12_BASE64 | base64 --decode -o $CERTIFICATE_PATH
          echo -n $PROVISIONING_PROFILE_BASE64 | base64 --decode -o $PROVISIONING_PROFILE_PATH
          
          security create-keychain -p $SIGNING_CERTIFICATE_P12_PASSWORD $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p $SIGNING_CERTIFICATE_P12_PASSWORD $KEYCHAIN_PATH

          security list-keychain -d user -s $KEYCHAIN_PATH
          
          security import $CERTIFICATE_PATH -P $SIGNING_CERTIFICATE_P12_PASSWORD -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PROVISIONING_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          cd ~/Library/MobileDevice/Provisioning\ Profiles
      - name: TODO - Needs updated with new firebase patterns
        run: |
          echo "ERROR: The pipeline doesn't create lib/firebase_options.dart and will fail"
          exit 1
      - name: Create environment files
        env:
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          GOOGLE_SERVICE_INFO_PLIST_BASE64: ${{ secrets.GOOGLE_SERVICE_INFO_PLIST_BASE64 }}
        run: |
          echo "class Env {
            Env._();
          
            static const sentryDsn = '$SENTRY_DSN';
            static const enableErrorTracking = true;
            static const enableAnalytics = true;
          }
          " > ./lib/env.dart
          echo "SENTRY_DSN=${SENTRY_DSN}" > ./ios/Runner/Config.xcconfig
          echo -n $GOOGLE_SERVICE_INFO_PLIST_BASE64 | base64 --decode > ./ios/Runner/GoogleService-Info.plist
      - uses: flutter-actions/setup-flutter@v3
        with:
          channel: stable
          version:  3.32.2
          cache-sdk: true
      - run: flutter pub get
      - run: flutter build ipa --release --no-codesign
      - name: Sign app
        run: |
          xcrun xcodebuild -exportArchive -exportOptionsPlist ./ios/ExportOptions.plist -archivePath ./build/ios/archive/Runner.xcarchive -exportPath ./build/ios/ipa
      - name: Write Appstore API private key
        env:
          APPSTORE_API_PRIVATE_KEY_BASE64: ${{ secrets.APPSTORE_API_PRIVATE_KEY_BASE64 }}
          APPSTORE_API_KEY_ID: ${{ secrets.APPSTORE_API_KEY_ID }}
        run: |
          mkdir -p ./private_keys
          echo -n $APPSTORE_API_PRIVATE_KEY_BASE64 | base64 --decode > ./private_keys/AuthKey_${APPSTORE_API_KEY_ID}.p8
      - name: Upload app to Testflight
        env:
          APPSTORE_API_KEY_ID: ${{ secrets.APPSTORE_API_KEY_ID }}
          APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
        run: |
          xcrun altool --upload-app --type ios -f ./build/ios/ipa/*.ipa --apiKey $APPSTORE_API_KEY_ID --apiIssuer $APPSTORE_ISSUER_ID
      - name: Clean up keychain and provisioning profile
        if: always()
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm -f ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
